{"version":3,"sources":["MandelbrotSet/infrastructure/MandelbrotSetWasm/pkg/index.js"],"names":["cachegetInt32Memory","getInt32Memory","buffer","wasm","Int32Array","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory","getStringFromWasm","ptr","len","Uint8Array","subarray","cachegetUint8ClampedMemory","getClampedArrayU8FromWasm","Uint8ClampedArray","MandelbrotSet","width","height","ret","__wrap","this","obj","Object","create","prototype","memi32","v0","retptr","slice","start_x_px","end_x_px","start_y_px","end_y_px","max_iterations","__wbindgen_throw","arg0","arg1","Error"],"mappings":"yOAEIA,EAAsB,KAC1B,SAASC,IAIL,OAH4B,OAAxBD,GAAgCA,EAAoBE,SAAWC,IAAYD,SAC3EF,EAAsB,IAAII,WAAWD,IAAYD,SAE9CF,EAGX,IAAIK,EAAoB,IAAIC,YAAY,QAAS,CAAEC,WAAW,EAAMC,OAAO,IAE3EH,EAAkBI,SAElB,IAAIC,EAAsB,KAQ1B,SAASC,EAAkBC,EAAKC,GAC5B,OAAOR,EAAkBI,QAPG,OAAxBC,GAAgCA,EAAoBR,SAAWC,IAAYD,SAC3EQ,EAAsB,IAAII,WAAWX,IAAYD,SAE9CQ,GAI0CK,SAASH,EAAKA,EAAMC,IAGzE,IAAIG,EAA6B,KAQjC,SAASC,EAA0BL,EAAKC,GACpC,OAPmC,OAA/BG,GAAuCA,EAA2Bd,SAAWC,IAAYD,SACzFc,EAA6B,IAAIE,kBAAkBf,IAAYD,SAE5Dc,GAIwBD,SAASH,EAAM,EAAGA,EAAM,EAAIC,GAIxD,IAAMM,EAAb,WAoBI,WAAYC,EAAOC,GAAS,oBACxB,IAAMC,EAAMnB,IAAuBiB,EAAOC,GAC1C,OAAOF,EAAcI,OAAOD,GAtBpC,mDAUQ,IAAMV,EAAMY,KAAKZ,IACjBY,KAAKZ,IAAM,EAEXT,IAA8BS,MAbtC,8BAEkBA,GACV,IAAMa,EAAMC,OAAOC,OAAOR,EAAcS,WAGxC,OAFAH,EAAIb,IAAMA,EAEHa,MANf,oDA6BoBtB,IADG,EACqCqB,KAAKZ,KADzD,IAEMiB,EAAS5B,IACT6B,EAAKnB,EAAkBkB,EAAOE,GAAiBF,EAAOE,IAAiBC,QAE7E,OADA7B,IAAqB0B,EAAOE,GAA0C,EAAzBF,EAAOE,IAC7CD,IAjCf,qCAwCoB3B,IADG,EACqCqB,KAAKZ,KADzD,IAEMiB,EAAS5B,IACT6B,EAAKnB,EAAkBkB,EAAOE,GAAiBF,EAAOE,IAAiBC,QAE7E,OADA7B,IAAqB0B,EAAOE,GAA0C,EAAzBF,EAAOE,IAC7CD,IA5Cf,qCAmDoB3B,IADG,EACqCqB,KAAKZ,KADzD,IAEMiB,EAAS5B,IACT6B,EAAKnB,EAAkBkB,EAAOE,GAAiBF,EAAOE,IAAiBC,QAE7E,OADA7B,IAAqB0B,EAAOE,GAA0C,EAAzBF,EAAOE,IAC7CD,IAvDf,qCA8DoB3B,IADG,EACqCqB,KAAKZ,KADzD,IAEMiB,EAAS5B,IACT6B,EAAKnB,EAAkBkB,EAAOE,GAAiBF,EAAOE,IAAiBC,QAE7E,OADA7B,IAAqB0B,EAAOE,GAA0C,EAAzBF,EAAOE,IAC7CD,IAlEf,kCA0EgBG,EAAYC,EAAUC,EAAYC,GAC1CjC,IAA+BqB,KAAKZ,IAAKqB,EAAYC,EAAUC,EAAYC,KA3EnF,6BAiFWC,GAESlC,IADG,EAC+BqB,KAAKZ,IAAKyB,GADxD,IAEMR,EAAS5B,IACT6B,EAAKb,EAA0BY,EAAOE,GAAiBF,EAAOE,IAAiBC,QAErF,OADA7B,IAAqB0B,EAAOE,GAA0C,EAAzBF,EAAOE,IAC7CD,MAvFf,KA2FaQ,EAAmB,SAASC,EAAMC,GAC3C,MAAM,IAAIC,MAAM9B,EAAkB4B,EAAMC,M","file":"static/js/3.57681478.chunk.js","sourcesContent":["import * as wasm from './index_bg.wasm';\n\nlet cachegetInt32Memory = null;\nfunction getInt32Memory() {\n    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachegetUint8ClampedMemory = null;\nfunction getUint8ClampedMemory() {\n    if (cachegetUint8ClampedMemory === null || cachegetUint8ClampedMemory.buffer !== wasm.memory.buffer) {\n        cachegetUint8ClampedMemory = new Uint8ClampedArray(wasm.memory.buffer);\n    }\n    return cachegetUint8ClampedMemory;\n}\n\nfunction getClampedArrayU8FromWasm(ptr, len) {\n    return getUint8ClampedMemory().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*/\nexport class MandelbrotSet {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MandelbrotSet.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_mandelbrotset_free(ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {MandelbrotSet}\n    */\n    constructor(width, height) {\n        const ret = wasm.mandelbrotset_new(width, height);\n        return MandelbrotSet.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    min_corner_a() {\n        const retptr = 8;\n        const ret = wasm.mandelbrotset_min_corner_a(retptr, this.ptr);\n        const memi32 = getInt32Memory();\n        const v0 = getStringFromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n        wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);\n        return v0;\n    }\n    /**\n    * @returns {string}\n    */\n    min_corner_b() {\n        const retptr = 8;\n        const ret = wasm.mandelbrotset_min_corner_b(retptr, this.ptr);\n        const memi32 = getInt32Memory();\n        const v0 = getStringFromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n        wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);\n        return v0;\n    }\n    /**\n    * @returns {string}\n    */\n    max_corner_a() {\n        const retptr = 8;\n        const ret = wasm.mandelbrotset_max_corner_a(retptr, this.ptr);\n        const memi32 = getInt32Memory();\n        const v0 = getStringFromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n        wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);\n        return v0;\n    }\n    /**\n    * @returns {string}\n    */\n    max_corner_b() {\n        const retptr = 8;\n        const ret = wasm.mandelbrotset_max_corner_b(retptr, this.ptr);\n        const memi32 = getInt32Memory();\n        const v0 = getStringFromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n        wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);\n        return v0;\n    }\n    /**\n    * @param {number} start_x_px\n    * @param {number} end_x_px\n    * @param {number} start_y_px\n    * @param {number} end_y_px\n    */\n    zoom_canvas(start_x_px, end_x_px, start_y_px, end_y_px) {\n        wasm.mandelbrotset_zoom_canvas(this.ptr, start_x_px, end_x_px, start_y_px, end_y_px);\n    }\n    /**\n    * @param {number} max_iterations\n    * @returns {Uint8ClampedArray}\n    */\n    render(max_iterations) {\n        const retptr = 8;\n        const ret = wasm.mandelbrotset_render(retptr, this.ptr, max_iterations);\n        const memi32 = getInt32Memory();\n        const v0 = getClampedArrayU8FromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();\n        wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);\n        return v0;\n    }\n}\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm(arg0, arg1));\n};\n\n"],"sourceRoot":""}